name: My_CI

on: [ push ]

env:
    BUILD_DIR: build

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    env:
        BUILD_DIR: ./build/

    strategy:
      matrix:
        CMake_Config: [Debug, Release]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - name: SETUP - Checkout git repo
        uses: actions/checkout@v2

      - name: SETUP - Set up build tools
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install valgrind

      - name: BUILD - CMake configure
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.CMake_Config }} -Wdev -Werror=dev -S . -B ${{ env.BUILD_DIR }}

      - name: BUILD - CMake build
        run: |
          cmake --build ${{ env.BUILD_DIR }} -j10 --config=${{ matrix.CMake_Config}} 

      - name: TEST - CTest for unit tests
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest -j10 -C ${{ matrix.CMake_Config }} -T test --output-on-failure -L "UnitTests"

      - name: TEST - CTest for integration tests
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest -j10 -C ${{ matrix.CMake_Config }} -T test --output-on-failure -L "IntegrationTests"

  code-quality:
    runs-on: ubuntu-latest

    env:
        BUILD_DIR: ./build/
        CLANG_VERSION: 10
        CMake_Config: Debug

        CC: /usr/bin/clang
        CXX: /usr/bin/clang++

    steps:
      - name: SETUP - Checkout git repo
        uses: actions/checkout@v2

      - name: SETUP - CMake configure
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.CMake_Config }} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -S . -B ${{ env.BUILD_DIR }}

      - name: CHECK - Clang-Format (formatting)
        run: bash ./.github/helpers/clang-format-all .

      - name: CHECK - Clang-Tidy (static analysis)
        run: find ./InjectMe/ -name "*.cpp" -o -name "*.hpp" | xargs clang-tidy -p=${{ env.BUILD_DIR }} --header-filter='^\.\/InjectMe/.*\.hpp$'
